// Code generated by MockGen. DO NOT EDIT.
// Source: go-service-template/internal/app/handler (interfaces: PingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "go-service-template/internal/app/dto"
)

// MockPingService is a mock of PingService interface.
type MockPingService struct {
	ctrl     *gomock.Controller
	recorder *MockPingServiceMockRecorder
}

// MockPingServiceMockRecorder is the mock recorder for MockPingService.
type MockPingServiceMockRecorder struct {
	mock *MockPingService
}

// NewMockPingService creates a new mock instance.
func NewMockPingService(ctrl *gomock.Controller) *MockPingService {
	mock := &MockPingService{ctrl: ctrl}
	mock.recorder = &MockPingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingService) EXPECT() *MockPingServiceMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingService) Ping(arg0 context.Context) dto.Ping {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(dto.Ping)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingServiceMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingService)(nil).Ping), arg0)
}

// PingWithDelay mocks base method.
func (m *MockPingService) PingWithDelay(arg0 context.Context) dto.Ping {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingWithDelay", arg0)
	ret0, _ := ret[0].(dto.Ping)
	return ret0
}

// PingWithDelay indicates an expected call of PingWithDelay.
func (mr *MockPingServiceMockRecorder) PingWithDelay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingWithDelay", reflect.TypeOf((*MockPingService)(nil).PingWithDelay), arg0)
}
