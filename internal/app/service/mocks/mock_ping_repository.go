// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.edu112.iteco-inno.ru/territory/go-service-template/internal/app/service (interfaces: PingRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPingRepository is a mock of PingRepository interface.
type MockPingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPingRepositoryMockRecorder
}

// MockPingRepositoryMockRecorder is the mock recorder for MockPingRepository.
type MockPingRepositoryMockRecorder struct {
	mock *MockPingRepository
}

// NewMockPingRepository creates a new mock instance.
func NewMockPingRepository(ctrl *gomock.Controller) *MockPingRepository {
	mock := &MockPingRepository{ctrl: ctrl}
	mock.recorder = &MockPingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingRepository) EXPECT() *MockPingRepositoryMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingRepository) Ping(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockPingRepositoryMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingRepository)(nil).Ping), arg0, arg1)
}
